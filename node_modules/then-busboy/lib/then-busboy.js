"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _http = require("http");

var _path = require("path");

var _objectDeepFromEntries = _interopRequireDefault(require("object-deep-from-entries"));

var _invariant = _interopRequireDefault(require("@octetstream/invariant"));

var _busboy = _interopRequireDefault(require("busboy"));

var _lodash = _interopRequireDefault(require("lodash.merge"));

var _mapListeners = _interopRequireDefault(require("./util/mapListeners"));

var _getType = _interopRequireDefault(require("./util/getType"));

var _isPlainObject = _interopRequireDefault(require("./util/isPlainObject"));

var _readListeners = _interopRequireDefault(require("./util/readListeners"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const initializers = (0, _readListeners.default)((0, _path.join)(__dirname, "listener"));
const defaults = {
  restoreTypes: true
  /**
   * Promise-based wrapper around Busboy. Inspired by async-busboy.
   * You'll get exactly what you've sent from your client app.
   * All files and other fields in a single object.
   *
   * @param {http.IncomingMessage} request â€“ HTTP request object
   * @param {object} [options = {}] - then-busboy options
   *
   * @return {Promise<object>}
   *
   * @api public
   *
   * @example
   *
   * // Simplest Koa.js middleware:
   * import busboy from "then-busboy"
   *
   * const toLowerCase = string => String.prototype.toLowerCase.call(string)
   *
   * const multipart = () => async (ctx, next) => {
   *   if (["post", "put"].includes(toLowerCase(ctx.method)) === false) {
   *     return await next()
   *   }
   *
   *   if (ctx.is("multipart/form-data") === false) {
   *     return await next()
   *   }
   *
   *   ctx.request.body = await busboy(ctx.req)
   *
   *   await next()
   * }
   *
   * export default multipart
   */

};

const thenBusboy = (request, options = {}) => new Promise((resolve, reject) => {
  (0, _invariant.default)(!(request instanceof _http.IncomingMessage), TypeError, "Request should be an instanceof http.IncomingMessage. Received %s", (0, _getType.default)(request));
  (0, _invariant.default)(!(0, _isPlainObject.default)(options), TypeError, "Options should be an object. Received %s", (0, _getType.default)(options));
  const headers = request.headers;
  options = (0, _lodash.default)({}, defaults, options, {
    headers
  });
  const busboy = new _busboy.default(request, options);
  const entries = [];

  const fulfill = (err, entry) => void (err ? reject(err) : entries.push(entry));

  const listeners = (0, _mapListeners.default)(initializers, fn => fn(options, fulfill)); // Set listeners before starting

  (0, _mapListeners.default)(listeners, (fn, name) => busboy.on(name, fn));

  function onFinish() {
    try {
      // Cleanup listeners
      (0, _mapListeners.default)(listeners, (fn, name) => busboy.removeListener(name, fn));
      resolve((0, _objectDeepFromEntries.default)(entries));
    } catch (err) {
      return reject(err);
    }
  }

  busboy.once("error", reject).once("finish", onFinish);
  request.pipe(busboy);
});

var _default = thenBusboy;
exports.default = _default;